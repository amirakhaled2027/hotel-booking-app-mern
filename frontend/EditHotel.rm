import {  useMutation, useQuery } from "react-query";
import { useParams } from "react-router-dom"
import * as apiClient from '../api-client';
import ManageHotelForm from "../forms/ManageHotelForm/ManageHotelForm";
import { HotelType } from "../../../backend/src/shared/types";
import { useAppContext } from "../contexts/AppContext";


export type HotelFormData = {
  name: string;
  city: string;
  country: string;
  description: string;
  type: string;
  pricePerNight: number;
  starRating: number;
  facilities: string[];
  imageFiles: FileList;
  imageUrls: string[];
  adultCount: number;
  childCount: number;
}

export type Props = {
//this line is added after working on edit hotel page
//and this is gonna cause you to make a lot of changes in this code in this file
hotel: HotelType ;
// onSave: (HotelFormData: FormData) => void;
// isLoading: boolean;
}

function EditHotel(props: Props) {

    //to pass the id of the user that its editing his page
    const { hotelId } = useParams();
    const { showToast } = useAppContext();

    // using react query to call our fetch request we just created 
    const { data : hotel } = useQuery("fetchMyHotelById", () => {
      apiClient.fetchMyHotelById(hotelId || ""),
        {
          //this query is only gonna run if we have a hotelId
          //the double exclamation mark(!!) means: is a check fro a trophy value
          //so if hotelId has a value, then this little expression is gonna return true
          //but if the hotelId is undefined or empty string or null then this is going
          //to evaluate to false which means enabled will be false as well
          enabled: !!hotelId,
        };
    });

    if (hotel) {
      // Use the hotel data here
      console.log(hotel); 
    } 

    //CHATGPT
    // const { data: hotel } = useQuery(
    //   ["fetchMyHotelById", hotelId], // Include hotelId in the query key
    //   () => apiClient.fetchMyHotelById(hotelId || ""),
    //   {
    //     enabled: !!hotelId,
    //   }
    // );



    const { mutate, isLoading } = useMutation(apiClient.updateMyHotelById, {
      onSuccess: () => {
        showToast({ message: "Hotel Saved!", type: "SUCCESS" });
      },
      onError: () => {
        showToast({ message: "Error Saving Hotel", type: "ERROR" });
      },
    });
  
    const handleSave = (hotelFormData: FormData) => {
      mutate(hotelFormData);
    };

  return (
    <ManageHotelForm hotel={props.hotel} onSave={handleSave} isLoading={isLoading}/>
    // hotel ? <ManageHotelForm hotel={hotel} onSave={handleSave} isLoading={isLoading} /> : <div>Loading...</div>
    
  )
}

export default EditHotel


